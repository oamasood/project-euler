__author__ = 'oamasood'


def multiples_of_three_and_five():
    """
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
    The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
    """

    ceiling = 1000

    import operator
    return reduce(operator.add,
                  filter(lambda x: x % 3 == 0 or x % 5 == 0,
                         xrange(1, ceiling)))


def even_fibonacci_numbers():
    """
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
    the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
    even-valued terms.
    """

    max_fib_term = 4 * 1000 * 1000

    fib_map = dict()
    fib_map[0] = 1
    fib_map[1] = 1
    sum_of_even_terms = 0

    # Populate fib_map while summing even-valued terms
    current_fib_term = 1
    term_number = 2
    while current_fib_term < max_fib_term:
        current_fib_term = fib_map[term_number] = fib_map[term_number - 1] + fib_map[term_number - 2]
        term_number += 1
        if current_fib_term % 2 == 0:
            sum_of_even_terms += current_fib_term
    return sum_of_even_terms


def largest_prime_factor():
    """
    The prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143 ?
    """

    big_number = 600851475143L

    # Go from 1 to big number and keep breaking big number down by dividing by current number.
    # Save the last number that divided the big number, this number is eventually the largest prime factor

    largest_factor = 1
    while big_number > 1:
        for i in xrange(2, big_number + 1):
            if big_number % i == 0:
                big_number /= i
                largest_factor = i
                print "big_number=%s, largest_factor=%s" % (big_number, largest_factor)
                break

    return largest_factor
